# -*- coding: utf-8 -*-
"""Копия блокнота "многомерная регрессия.ipynb"

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EUZgI5zBAplgAgpaU6vpU2hmrwaKiL1C
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
plt.style.use('ggplot')
# %matplotlib inline

url='https://edu.vsu.ru/pluginfile.php/6259709/mod_resource/content/1/%D0%9F%D0%A0%D0%9E%D0%94%D0%90%D0%96%D0%98.xls'
df=pd.read_excel(url)
print(df)

df=pd.read_excel(url)
print(df)

df.info()

df=df.drop(200)

df.info()

df['N']=df['N'].astype(float)
df.info()

df.hist()







_ =df.hist(df.columns, figsize=(10, 10))

import seaborn as sns
sns.heatmap(df.corr())

X = df[['TV']]
y = df['Sales']

import matplotlib.pyplot as plt
plt.scatter(X, y)
plt.xlabel("TV")
plt.ylabel("Продажи")
plt.show()

# построим модель парной линейной регрессии вида y=w*x+b
from sklearn.linear_model import LinearRegression
model = LinearRegression()
model.fit(X, y) # обучение модели
w=model.coef_
b=model.intercept_
w,b

#найдем предсказания модели
y_pred=model.predict(X)

#нарисуем  график исходных данных и построенной модели
X = df[['TV']]
y = df['Sales']
plt.scatter(X, y)
plt.plot(X, y_pred,'green')
plt.xlabel("TV")
plt.ylabel("Продажи")
plt.show()

model.score(X,y)

y=df['Sales']
X=df.drop(['Sales','N'],axis=1)
X.head()

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.75)



y_train.shape, y_test.shape

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()

X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

from sklearn.linear_model import LinearRegression
model = LinearRegression()

model.fit(X_train, y_train)

y_train_prediction = model.predict(X_train)
y_test_prediction = model.predict(X_test)

from sklearn.metrics import mean_squared_error
from sklearn.metrics import mean_absolute_error
print('Train MSE: ', mean_squared_error(y_train, y_train_prediction))
print('Test MSE: ', mean_squared_error(y_test, y_test_prediction))

print('Train MAE: ', mean_absolute_error(y_train, y_train_prediction))
print('Test MAE: ', mean_absolute_error(y_test, y_test_prediction))

print('Train R^2: ', model.score(X_train,y_train ))
print('Test R^2: ', model.score(X_test,y_test ))

from sklearn.linear_model import Lasso, Ridge
rg = Ridge(fit_intercept=True, alpha=1, random_state=0)
rg.fit(X, y)
print('R² Value:',rg.score(X, y))

plt.figure(figsize=(15, 6))
plt.bar(X.columns, model.coef_)

from sklearn.preprocessing import PolynomialFeatures
pf = PolynomialFeatures(degree=2)
X_polynomial = pf.fit_transform(X)

X_train_pol, X_test_pol, y_train_pol, y_test_pol=train_test_split(X_polynomial,y, test_size=0.8,random_state=21)

model2 = LinearRegression()
model2.fit(X_train_pol, y_train_pol)
w=model2.coef_
b=model2.intercept_
w,b

model2.score(X_train_pol, y_train_pol)

model2.score(X_test_pol,y_test_pol)

y_pred2=model2.predict(X_test_pol)

plt.scatter(y_test_pol, y_pred2)
plt.xlabel("Реальная цена")
plt.ylabel("Предсказанная цена")
plt.plot(y, y,'red')
plt.title('Диаграмма рассеяния')
plt.show()